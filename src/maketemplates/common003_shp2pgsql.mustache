{{#srid}}
	@echo "Conferindo se SRID {{.}} esta configurado:"
	@psql $(pg_uri_db) -c "SELECT srid, proj4text FROM spatial_ref_sys where srid={{.}}"
	@echo "Tudo bem até aqui?  [ENTER para continuar ou ^C para rodar WS/ingest-step1]"
	@read _tudo_bem_
{{/srid}}
{{#orig_subfilename}}
	@echo Extraindo ...
	cd $(sandbox); 7z x -y "*{{orig_filename}}*" ; chmod -R a+rx . > /dev/null
{{/orig_subfilename}}
{{#isShp}}
	@echo Executando shp2pgsql ...
{{#multiple_files}}
	cd $(sandbox); find $(sandbox) -iname "*{{#orig_subfilename}}{{orig_subfilename}}{{/orig_subfilename}}*.shp" -exec sh -c "psql $(pg_uri_db) -c 'DROP TABLE IF EXISTS $(tabname)'; shp2pgsql -D {{#charset}}-W {{charset}}{{/charset}} {{{method_opts}}} -s {{srid}} {} $(tabname) | psql -q $(pg_uri_db); {{#sql_view}}psql $(pg_uri_db) -c "CREATE VIEW vw{{file}}_$(tabname) AS {{{.}}}" | psql $(pg_uri_db) -c "SELECT ingest.any_load('{{method}}','{}','$(layername)','vw{{file}}_$(tabname)','$(fullPkID)','$(part{{file}}_file)',array[]::text[])" | psql $(pg_uri_db) -c "DROP VIEW vw{{file}}_$(tabname)"{{/sql_view}}{{^sql_view}}psql $(pg_uri_db) -c \"SELECT ingest.any_load('{{method}}','{}','$(layername)','$(tabname)','$(fullPkID)','$(part{{file}}_file)',array{{{sql_select}}})\"{{/sql_view}}; chmod -R a+rx . 2> /dev/null" \;
	@echo "Confira os resultados nas tabelas ingest.layer_file e ingest.feature_asis".
{{/multiple_files}}
{{^multiple_files}}
	cd $(sandbox); shp2pgsql -D {{#charset}}-W {{charset}}{{/charset}} {{{method_opts}}} -s {{srid}} "{{orig_filename}}.shp" $(tabname) | psql -q $(pg_uri_db) 2> /dev/null
{{/multiple_files}}
{{/isShp}}
{{#isCsv}}
{{#isXlsx}}
	@echo Convertendo de {{orig_filename}}.xlsx para {{orig_filename}}.csv em UTF8 com LF ...
	xlsx2csv -i {{{method_opts}}} "$(sandbox)/{{orig_filename}}.xlsx" "$(sandbox)/{{orig_filename}}.csv"
{{/isXlsx}}
{{^isXlsx}}
{{#charset}}
	@echo Alterando codificação para UTF8 e o tipo de quebra de linha de CRLF para LF ...
	iconv -f {{charset}} -t UTF-8 $(sandbox)/{{orig_filename}}.csv | dos2unix > $(sandbox)/{{orig_filename}}.unix_utf8.csv
{{/charset}}
	@echo Executando csv2sql ...
{{#charset}}
	psql $(pg_uri_db) -c "SELECT ingest.fdw_generate_direct_csv( '$(sandbox)/{{orig_filename}}.unix_utf8.csv', '$(tabname)'{{#delimiter}},'{{delimiter}}'{{/delimiter}} )"
{{/charset}}
{{/isXlsx}}
{{^charset}}
	psql $(pg_uri_db) -c "SELECT ingest.fdw_generate_direct_csv( '$(sandbox)/{{orig_filename}}.csv', '$(tabname)'{{#delimiter}},'{{delimiter}}'{{/delimiter}} )"
{{/charset}}
{{/isCsv}}
{{#isOgr}}
	@echo Executando ogr2ogr ...
	docker run --rm --network host -v $(sandbox):/tmp osgeo/gdal ogr2ogr -overwrite -f "PostgreSQL" PG:" dbname='$(pg_db)' host='localhost' port='5432' user='postgres' " "/tmp/{{orig_filename}}{{orig_ext}}" {{{orig_tabname}}} -nln $(tabname)
{{/isOgr}}
{{#isOgrWithShp}}
	@echo Executando ogr2ogr ...
	docker run --rm --network host -v $(sandbox):/tmp osgeo/gdal ogr2ogr -overwrite -f "PostgreSQL" PG:" dbname='$(pg_db)' host='localhost' port='5432' user='postgres' " /tmp/{{{orig_tabname}}} {{{orig_tabname}}} -nln $(tabname)
{{/isOgrWithShp}}
{{#isOsm}}
	@echo Executando osm2sql ...
{{/isOsm}}
